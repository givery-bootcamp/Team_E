name: Deploy

on:
  push:
    branches:
      - 'main'

env:
  AWS_REGION: ap-northeast-1
  REPOSITORY_NAME_BACKEND: dena-training-2024-team-5-backend
  REPOSITORY_NAME_FRONTEND: dena-training-2024-team-5-frontend
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECS_CLUSTER: dena-training-2024
  ECS_SERVICE: dena-training-2024-team-5
  BUCKET_PREFIX: team-5
  VITE_API_ENDPOINT_PATH: https://team-5_bk.member0005.track-bootcamp.run
  AUTH_SECRET_KEY: ${{ secrets.AUTH_SECRET_KEY }}

jobs:
  # frontend-ecr-push:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2
      
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Set up Node.js
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: '20'

  #   - name: Install dependencies
  #     working-directory: ./frontend
  #     run: npm install

  #   - name: Build
  #     working-directory: ./frontend
  #     run: npm run build
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4
  #     with:
  #       aws-region: ${{ env.AWS_REGION }}
  #       aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

  #   - name: Log in to Amazon ECR
  #     uses: aws-actions/amazon-ecr-login@v2

  #   - name: Build and push Docker image
  #     run: |
  #       ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
  #       IMAGE_TAG=latest

  #       docker build -f docker/frontend-cd.Dockerfile -t $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_FRONTEND:$IMAGE_TAG .
  #       docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_FRONTEND:$IMAGE_TAG
    
  backend-ecr-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: '1.22'

    - name: Build
      working-directory: ./backend
      run: |
        touch .env
        echo "SECRET_KEY=${AUTH_SECRET_KEY}" >> .env
        cat .env
        go build -o myapp
      env:
        AUTH_SECRET_KEY: ${{ env.AUTH_SECRET_KEY }}


    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Docker image
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        IMAGE_TAG=latest

        docker build -f docker/backend-cd.Dockerfile -t $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_BACKEND:$IMAGE_TAG .
        docker push $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPOSITORY_NAME_BACKEND:$IMAGE_TAG

  ecs-update:
    runs-on: ubuntu-latest
    needs: [backend-ecr-push]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

    - name: Update ECS service to force new deployment
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
